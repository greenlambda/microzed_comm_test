# Makefile for ZedBoard Comm Tester
# Author: Jeremy Hunt
# Date: Nov, 14 2014

# Path Definitions

# Project Directories
INCDIR = inc
BINDIR = bin
BUILDDIR = build
SRCDIR = src
LIBDIR = lib

# These are all the local project source files
SRCS = $(addprefix $(SRCDIR)/, master/mastermain.c common/comm.c common/util.c common/log.c submaster/submastermain.c main.c)
LIBS := 
ELF := $(BINDIR)/comm

# Compiler
CROSS_COMPILE ?= arm-xilinx-linux-gnueabi-
CC := $(CROSS_COMPILE)gcc

# Particular processor
PROCESSOR = 
# -static -static-libgcc

# Directories of used header files
INCLUDE = -I$(INCDIR)

# Define the compiler flags
CFLAGS = -g -Wall -Wextra -Werror $(PROCESSOR) $(INCLUDE)

# This clever bit of make-fu builds dependency files for each source file so
# that if the included files for that source file are updated, the object for
# that file is also rebuilt. This rule generates a coresponding %.d file in
# the build directory for each source file.
DEPGENFLAGS = -MMD -MP

# Create the objects and dependencies based on the sources
OBJS = $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(SRCS:.c=.o))
DEPENDENCIES := $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(SRCS:.c=.d)) $(STM_DEPS) $(FRTOS_DEPS)

# Build all relevant files and create .elf
all: $(ELF)
	
# Build source files into objects
$(BUILDDIR)/%.o: $(SRCDIR)/%.c
	@mkdir -p $(patsubst %/,%,$(dir $@)) # Create necessary dirs in build
	$(CC) $(DEPGENFLAGS) $(CFLAGS) -o $@ -c $<

# Link the program's object files and the libraries together into an executable elf file.
$(ELF): $(OBJS) $(LIBS)
	$(CC) $(CFLAGS) $^ -o $@

.PHONY: copy-bin clean

# SCP the bin over to the Zync
copy-bin: $(ELF)
	scp $(ELF) root@192.168.1.10:/home/default/comm

# Remove all files generated by target 'all'
clean:
	rm -rf $(BUILDDIR)
	rm -f $(ELF)

# Weakly include the dependencies. If there is no rule to rebuild them,
# make won't try, so phony targets still work properly.
-include $(DEPENDENCIES)


